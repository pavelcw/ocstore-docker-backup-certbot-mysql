version: '3'

services:
  nginx:
    container_name: nginx
    image: nginx:latest
    networks:
      app_net:
    restart: unless-stopped
    volumes:
      - ./confs/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./confs/certbot/conf:/etc/letsencrypt
      - ./confs/certbot/www:/var/www/certbot
    ports:
      - 80:80
      - 443:443
    links:
      - apache:app
    command: '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'''
  certbot:
    container_name: certbot
    image: certbot/certbot
    networks:
      app_net:
    restart: unless-stopped
    volumes:
      - ./confs/certbot/conf:/etc/letsencrypt
      - ./confs/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
  apache:
    build: .
    restart: always
    networks:
      app_net:
    environment:
      WORDPRESS_DB_PASSWORD: example
    links:
      - mysql:db
    volumes:
       - ./upload:/var/www/html
       - /u02/app/storage:/var/www/storage
       - ./confs/php.ini:/var/www/html/php.ini
  mysql:
    image: mysql:5.7
    restart: always
    networks:
      app_net:
    environment:
      MYSQL_ROOT_PASSWORD: pAssWord
    volumes:
       - /u02/db/data:/var/lib/mysql
       - ./dbdump:/docker-entrypoint-initdb.d
  backup:
    build:
      context: ./backup
      dockerfile: Dockerfile
    restart: always
    networks:
      app_net:
    environment:
      MYSQL_ROOT_PASSWORD: pAssWord
      MYSQL_USER: root
      MYSQL_HOST: mysql
      MYSQL_BACKUP_PATH: /backup/db
      APP_BACKUP_PATH: /backup/app
      APP_MAIN_PATH: /app
      APP_STORAGE_PATH: /docker
      MYSQL_DB_NAME: oc
    volumes:
      - /u02/db/backups:/backup/db
      - /u02/app/backups:/backup/app
      - /u02/app:/app
      - ./:/docker
      - ./backup/backup.sh:/backup.sh
    command: '/bin/sh -c ''while :; do /backup.sh; sleep 24h & wait $${!}; done '''


networks:
  app_net:
    name: app_net

